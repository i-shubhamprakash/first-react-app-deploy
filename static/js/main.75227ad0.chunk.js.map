{"version":3,"sources":["components/Header.js","components/MainContent.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Header","props","react_default","a","createElement","className","this","headerContent","Component","MainContent","contentText","headers","contents","content1","content2","content3","content4","App","src","logo","alt","role","aria-label","components_Header","components_MainContent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAaeA,wLATJC,GACH,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UAAME,KAAKL,MAAMM,uBAJZC,cCSNC,iLATJR,GACH,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVC,KAAKL,MAAMS,oBAJFF,aCMtBG,EACO,iBADPA,EAEO,iBAFPA,EAGO,mBAHPA,EAIO,uBAGPC,EAAW,CACbC,SAAU,yPACVC,SAAUZ,EAAAC,EAAAC,cAAA,uFAA8EF,EAAAC,EAAAC,cAAA,WAA9E,IAAoFF,EAAAC,EAAAC,cAAA,WAApF,6FAEVW,SAAUb,EAAAC,EAAAC,cAAA,UACRF,EAAAC,EAAAC,cAAA,+GACAF,EAAAC,EAAAC,cAAA,WAFQ,IAEFF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,2EACAF,EAAAC,EAAAC,cAAA,WAJQ,IAIFF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,2FACAF,EAAAC,EAAAC,cAAA,WANQ,IAMFF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,gHAEFY,SAAUd,EAAAC,EAAAC,cAAA,UACRF,EAAAC,EAAAC,cAAA,yEACAF,EAAAC,EAAAC,cAAA,WAFQ,IAEFF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,8DACAF,EAAAC,EAAAC,cAAA,WAJQ,IAIFF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,sCAmCWa,mLA7BX,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKc,IAAKC,IAAMd,UAAU,WAAWe,IAAI,SACzClB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,2BAAkBF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAxB,QAAmCF,EAAAC,EAAAC,cAAA,YAHrC,KAGkDF,EAAAC,EAAAC,cAAA,0CAAiCF,EAAAC,EAAAC,cAAA,QAAMiB,KAAK,MAAMC,aAAW,YAA5B,gBAAjC,MAGlDpB,EAAAC,EAAAC,cAACmB,EAAD,CAAQhB,cAAeI,IAEvBT,EAAAC,EAAAC,cAACoB,EAAD,CAAad,YAAaE,EAASC,WAEnCX,EAAAC,EAAAC,cAACmB,EAAD,CAAQhB,cAAeI,IAEvBT,EAAAC,EAAAC,cAACoB,EAAD,CAAad,YAAaE,EAASE,WAEnCZ,EAAAC,EAAAC,cAACmB,EAAD,CAAQhB,cAAeI,IAEvBT,EAAAC,EAAAC,cAACoB,EAAD,CAAad,YAAaE,EAASG,WAEnCb,EAAAC,EAAAC,cAACmB,EAAD,CAAQhB,cAAeI,IAEvBT,EAAAC,EAAAC,cAACoB,EAAD,CAAad,YAAaE,EAASI,mBAxBzBR,aCzBEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCE/HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.75227ad0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Header extends Component {\n    render(props) {\n        return (\n            <div className=\"header\">\n                <h1>{ this.props.headerContent }</h1>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass MainContent extends Component{\n    render(props) {\n        return (\n            <div className=\"content\">\n                {this.props.contentText}\n            </div>\n        );\n    }\n}\n\nexport default MainContent;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './components/Header.js'\nimport Header from './components/Header.js';\nimport MainContent from './components/MainContent.js'\n\n\nlet headers = {\n  header1: \"What is React?\",\n  header2: \"About this App\",\n  header3: \"What to do next?\",\n  header4: \"Features of this App\"\n}\n\nlet contents = {\n  content1: \"In computing, React is a JavaScript framework for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications.\",\n  content2: <p>This is a single page application which I have created purely using react. <br/> <br/>\n    This will give you a quick demo of how a react application looks on your Phone or Desktop</p>,\n  content3: <ul>\n    <li>Add this app to your Home Screen by clicking on the browser menu and tapping \"Add to Home Screen\"</li>\n    <br/> <br/>\n    <li>Now close the browser and open the app from your Home Screen.</li>\n    <br/> <br/>\n    <li>You will see that this will launch just like your other android applications.</li>\n    <br/> <br/>\n    <li>It works even in offline. If you switch off the internet and launch this app, it would still work</li>\n  </ul>,\n  content4: <ul>\n    <li>Complete Standalone Progressive Web App created using React</li>\n    <br/> <br/>\n    <li>Works even in offline mode (Uses service Worker)</li>\n    <br/> <br/>\n    <li>No installation needed</li>\n  </ul>\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1>WELCOME!</h1>\n          <h2> I am Shubham <br /><br /> and <br /></h2>  <h3> (This is my First React App <span role=\"img\" aria-label=\"An emoji\">üòç</span>)</h3>\n        </header>\n\n        <Header headerContent={headers.header1} />\n\n        <MainContent contentText={contents.content1}/>\n\n        <Header headerContent={headers.header2} />\n\n        <MainContent contentText={contents.content2} />\n\n        <Header headerContent={headers.header3} />\n\n        <MainContent contentText={contents.content3} />\n\n        <Header headerContent={headers.header4} />\n\n        <MainContent contentText={contents.content4} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}